from fastapi import FastAPI, Depends, HTTPException, APIRouter
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from database import SessionLocal, engine
import models
from schemas import StudentCreate, StudentResponse, DepartmentResponse, FormationResponse, FormationCreate, CourseCreate, CourseResponse

models.Base.metadata.create_all(bind=engine)

app = FastAPI()

# CORS config
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",  # Next.js
        "http://localhost:4200"   # Angular
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üßë‚Äçüéì Students
@app.get("/students", response_model=list[StudentResponse])
def get_students(db: Session = Depends(get_db)):
    return db.query(models.Student).all()

@app.post("/login")
def login(student_credentials: dict, db: Session = Depends(get_db)):
    email = student_credentials.get("email")
    password = student_credentials.get("password")
    
    student = db.query(models.Student).filter(models.Student.email == email).first()
    
    if not student or student.password != password:
        raise HTTPException(status_code=401, detail="Email ou mot de passe incorrect")
    
    return {
        "access_token": "fake-token",
        "student_id": student.id
    }

@app.post("/students", response_model=StudentResponse)
def add_student(student: StudentCreate, db: Session = Depends(get_db)):
    new_student = models.Student(**student.model_dump())
    db.add(new_student)
    db.commit()
    db.refresh(new_student)
    return new_student

# üèõÔ∏è Departments
@app.get("/departments", response_model=list[DepartmentResponse])
def get_departments(db: Session = Depends(get_db)):
    return db.query(models.Department).all()

# üéì Formations
@app.get("/formations", response_model=list[FormationResponse])
def get_formations(db: Session = Depends(get_db)):
    return db.query(models.Formation).filter(
        models.Formation.name != None,
        models.Formation.department_id != None
    ).all()

@app.get("/students/{student_id}", response_model=StudentResponse)
def get_student(student_id: int, db: Session = Depends(get_db)):
    student = db.query(models.Student).filter(models.Student.id == student_id).first()
    if not student:
        raise HTTPException(status_code=404, detail="√âtudiant non trouv√©")
    return student

@app.delete("/students/{student_id}")
def delete_student(student_id: int, db: Session = Depends(get_db)):
    student = db.query(models.Student).filter(models.Student.id == student_id).first()
    if not student:
        raise HTTPException(status_code=404, detail="√âtudiant non trouv√©")
    
    db.delete(student)
    db.commit()
    
    return {"message": "√âtudiant supprim√© avec succ√®s"}

@app.post("/formations", response_model=FormationResponse)
def add_formation(formation: FormationCreate, db: Session = Depends(get_db)):
    new_formation = models.Formation(**formation.model_dump())
    db.add(new_formation)
    db.commit()
    db.refresh(new_formation)
    return new_formation

# Endpoints pour les cours
@app.get("/courses", response_model=list[CourseResponse])
def get_courses(db: Session = Depends(get_db)):
    return db.query(models.Course).all()

@app.post("/courses", response_model=CourseResponse)
def add_course(course: CourseCreate, db: Session = Depends(get_db)):
    new_course = models.Course(**course.model_dump())
    db.add(new_course)
    db.commit()
    db.refresh(new_course)
    return new_course

@app.get("/courses/{course_id}", response_model=CourseResponse)
def get_course(course_id: int, db: Session = Depends(get_db)):
    course = db.query(models.Course).filter(models.Course.id == course_id).first()
    if not course:
        raise HTTPException(status_code=404, detail="Cours non trouv√©")
    return course

@app.delete("/courses/{course_id}")
def delete_course(course_id: int, db: Session = Depends(get_db)):
    course = db.query(models.Course).filter(models.Course.id == course_id).first()
    if not course:
        raise HTTPException(status_code=404, detail="Cours non trouv√©")
    
    db.delete(course)
    db.commit()
    
    return {"message": "Cours supprim√© avec succ√®s"}

# Ajouter une redirection depuis / vers /docs
@app.get("/")
def root():
    from fastapi.responses import RedirectResponse
    return RedirectResponse(url="/docs")
